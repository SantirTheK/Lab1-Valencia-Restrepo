import random 

def automata_pertenece_a_L(w):
    estado = 'q0'
    k = s = t = 0 #iniciamos contadores para las secciones de la cadena
    
    for caracter in w:
        if estado == 'q0':
            if caracter == 'a':
                k += 1
            else:
                estado = 'q1'
                s += 1
        elif estado == 'q1':
            if caracter == 'b':
                s += 1
            else:
                estado = 'q2'
                t += 1
        elif estado == 'q2':
            if caracter == 'a':
                t += 1
            else:
                return False #revisamos que no alla otro caracter diferente a 'a' y a 'b'
    
    return (k + s) % 3 == 0 and (k + s) == t #revisamos primeras condiciones para aceptar cadenas
def dividir_w(w, n):
    u = ""
    v = ""
    x = ""

    probabilidad = random.random()

    if probabilidad < .2:
        # 90% de las veces, la división hace perder al jugador con un patrón estratégico
        if 'b' in w:
            indice_b = w.index('b')
            u = w[:indice_b]  # Hasta el primer 'b'
            v = w[indice_b:indice_b + 1]  # Solo la 'b'
            x = w[indice_b + 1:]  # Resto de la cadena
        else:
            u = w[:n//3]
            v = w[n//3:2*n//3]
            x = w[2*n//3:]
    else:
        # 10% de las veces, la división es justa pero de la misma forma aleatoria
        tam_u = random.randint(1, len(w) // 3)
        tam_v = random.randint(1, (len(w) - tam_u) // 2)
        u = w[:tam_u]
        v = w[tam_u:tam_u + tam_v]
        x = w[tam_u + tam_v:]
    
    return u, v, x
def obtener_cadena_valida(n):
    while True:
        w = input(f"Ingrese una cadena sobre {'a', 'b'} con longitud >= {n} y que pertenezca a L: ")
        
        contador = 0
        for _ in w:
            contador += 1
        
        if contador >= n and automata_pertenece_a_L(w):
            return w
        print("La cadena ingresada no pertenece a L o es demasiado corta. Intente de nuevo.")
            x += caracter
        contador += 1
    
    return u, v, x
def jugar():
    n = random.randint(8, 30) #tamaño aleatorio para la cadena
    print(f"Número aleatorio n generado: {n}")
    w = obtener_cadena_valida(n) #cadena valida en L
    
    u, v, x = dividir_w(w, n) #divide la cadena en u,v,x
    print(f"Cadena dividida en: u='{u}', v='{v}', x='{x}'")
    
    m = int(input("Ingrese un número natural m (puede ser 0): ")) # toma valor aleatorio de m
    z = u + (v * m) + x
    print(f"Nueva cadena generada: {z}") #nueva cadena despues del bombeo
    
    if automata_pertenece_a_L(z):
        print("¡Ganaste! La cadena aún pertenece a L.") #Jugador gana, la cadena sigue perteneciendo a L
    else:
        print("La máquina gana. La cadena ya no pertenece a L.") #maquina gana, la cadena ya no pertenece a L


jugar()
